# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        include:
          - os: windows-2025
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
          
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release

          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            build_type: Release

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: >
        sudo apt install -y build-essential git make
        pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev
        libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev
        libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev
        libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev
        libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev
        libwayland-dev libdecor-0-dev liburing-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OSX_ARCHITECTURES=arm64;x86_64
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Package with CPack
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cpack -G ZIP

    - name: Upload Package as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: package-${{ matrix.os }}
        path: build/*.zip


  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run for version tags
    permissions:
      contents: write  # Required for creating releases

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: package

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: package/**/*.zip
          body: "Automated release from GitHub Actions"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}